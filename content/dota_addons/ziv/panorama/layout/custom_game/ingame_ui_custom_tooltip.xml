<root>
    <styles>
        <include src="s2r://panorama/styles/dotastyles.vcss_c" />
        <include src="file://{resources}/styles/custom_game/ingame_ui_windows.css" />
        <include src="file://{resources}/styles/custom_game/ingame_ui_colors.css" />
    </styles>
    <snippets>
        <snippet name="AbilityTooltip">
            <Panel class="AbilityTooltip WindowAnimation">
                <DOTAAbilityImage id="AbilityTooltipImage" class="BasicShadow" abilityname="ziv_empty1"/>
                <Panel class="TooltipCBR"/>
                <Label id="AbilityTooltipName" class="TooltipLabel" text=""/>
                <Panel class="TooltipCBR"/>
                <Label id="AbilityTooltipEnergyCost" html="true" class="TooltipLabel" text="#energy_cost"/>
                <Label id="AbilityTooltipCooldown" html="true" class="TooltipLabel" text="#cooldown"/>  
                <Label id="AbilityTooltipCastPoint" html="true" class="TooltipLabel" text="#cast_point"/> 
                <Label id="AbilityTooltipDescription" class="TooltipLabel" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."/> 
                <Panel class="TooltipCBR"/>
            </Panel>
        </snippet>
        <snippet name="ItemTooltip">
            <Panel class="ItemTooltip WindowAnimation">
                <DOTAItemImage id="ItemTooltipImage" class="BasicShadow" abilityname="ziv_empty1"/>
                <Panel class="TooltipCBR"/>
                <Label id="ItemTooltipName" class="TooltipLabel" text=""/>
                <Panel class="TooltipCBR"/>
                <Label id="ItemTooltipRarity" html="true" class="TooltipLabel" text=""/>
                <Label id="ItemTooltipSlot" html="true" class="TooltipLabel" text=""/>  
                <Panel class="TooltipCBR"/>
                <Label id="ItemTooltipDescription" class="TooltipLabel" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."/> 
            </Panel>
        </snippet>
    </snippets>
    <script>
        var Util = GameUI.CustomUIConfig().Util;

        function FillProperty(panel, name, value, color) {
            if (value && (typeof(value) == "string" || Util.RoundToTwo(value) != 0)) {
                var newValue = value;
                if (typeof(value) != "string") {
                    newValue = Util.RoundToTwo(value);
                }
                panel.text = $.Localize(name) + " <font color=\"" + (color ? color : "#ffffff") + "\">" + newValue + "</font>";
                return 1;
            } else {
                panel.visible = false;
                return 0;
            }
        }

        function AddCBR(parent, before) {
            var cbr = $.CreatePanel( "Panel", parent, "" );
            cbr.AddClass("TooltipCBR");
            if (before) {
                parent.MoveChildBefore(cbr, before);
            }
        }

        function SetupTooltip()
        {
            var PlayerTables = GameUI.CustomUIConfig().PlayerTables;

            var hero = Players.GetPlayerHeroEntityIndex( Players.GetLocalPlayer() );
            var heroName = Entities.GetUnitName(hero);
            if (heroName) {
                heroName = PlayerTables.GetTableValue("kvs", "heroes")[Entities.GetUnitName(hero)]["SecondName"];
            }
            
            // Cleanup
            if ($("#TooltipBorderB").FindChildTraverse("AbilityTooltip")) {
                $("#TooltipBorderB").FindChildTraverse("AbilityTooltip").RemoveAndDeleteChildren();
                $("#TooltipBorderB").FindChildTraverse("AbilityTooltip").DeleteAsync(0.0);
            }

            if ($("#TooltipBorderB").FindChildTraverse("ItemTooltip")) {
                $("#TooltipBorderB").FindChildTraverse("ItemTooltip").RemoveAndDeleteChildren();
                $("#TooltipBorderB").FindChildTraverse("ItemTooltip").DeleteAsync(0.0);
            }

            var abilityName = $.GetContextPanel().GetAttributeString( "ability", "not-found" );
            var itemID = parseInt($.GetContextPanel().GetAttributeString( "itemID", "not-found" ));
            
            if (itemID && itemID != "not-found" && itemID != undefined) {
                var itemName = Abilities.GetAbilityName(itemID);
                var itemData = PlayerTables.GetTableValue("items", itemID)

                if (itemData) {
                    $("#TooltipText").visible = false;

                    var itemKV = PlayerTables.GetTableValue("kvs", "items")[itemName];

                    var itemTooltip = $.CreatePanel( "Panel", $("#TooltipBorderB"), "ItemTooltip" );
                    itemTooltip.BLoadLayoutSnippet("ItemTooltip");

                    itemTooltip.FindChildTraverse("ItemTooltipImage").itemname = itemName;

                    itemTooltip.FindChildTraverse("ItemTooltipName").text = $.Localize("DOTA_Tooltip_ability_" + itemName);

                    itemTooltip.FindChildTraverse("ItemTooltipRarity").text = $.Localize("rarity") + Util.SpanString(($.Localize("rarity" + itemData.rarity)), "Rarity" + itemData.rarity);

                    if (itemKV["Slot"]) {
                        FillProperty(itemTooltip.FindChildTraverse("ItemTooltipSlot"), "slot", $.Localize("slot_" + itemKV["Slot"]), "#FFFFFF");
                    } else {
                        itemTooltip.FindChildTraverse("ItemTooltipSlot").visible = false;
                    }

                    itemTooltip.FindChildTraverse("ItemTooltipDescription").text = $.Localize("DOTA_Tooltip_ability_" + itemName + "_Description");

                    var i = 1;
                    if (itemKV["AbilitySpecial"] && Object.keys( itemKV["AbilitySpecial"] ).length >= 1) {
                        AddCBR(itemTooltip);

                        for (special in itemKV["AbilitySpecial"]) {
                            for (specialName in itemKV["AbilitySpecial"][special]) {
                                if (specialName != "var_type") {
                                    var specialCaption = $.Localize("DOTA_Tooltip_ability_" + itemName + "_" + specialName);
                                    if (specialCaption == "DOTA_Tooltip_ability_" + itemName + "_" + specialName) continue;

                                    var specialLabel = $.CreatePanel( "Label", itemTooltip, "ItemTooltipSpecial" + i);
                                    specialLabel.AddClass("TooltipLabel");
                                    specialLabel.html = true;

                                    var finalValue = Util.RoundToTwo(itemKV["AbilitySpecial"][special][specialName]);
                                    
                                    specialLabel.text = Util.ColorString("+ " + finalValue,"#ffffff") + "Â " + specialCaption;
                                }
                            }
                            i++;
                        }
                    }

                    if (itemData.built_in_modifiers && Object.keys( itemData.built_in_modifiers ).length >= 1)
                    {
                        AddCBR(itemTooltip);

                        var i = 0;
                        for (var key in itemData.built_in_modifiers)
                        {
                            var value = itemData.built_in_modifiers[key];

                            var specialLabel = $.CreatePanel( "Label", itemTooltip, "ItemTooltipSpecial" + i);
                            specialLabel.AddClass("TooltipLabel");
                            specialLabel.html = true;

                            var finalValue = value;

                            specialLabel.text = Util.ColorString("+ " + finalValue,"#ffffff") + " " + $.Localize(key);

                            i = i + 1;
                        }
                    }

                    if (itemData.fortify_modifiers && Object.keys( itemData.fortify_modifiers ).length >= 1)
                    {
                        AddCBR(itemTooltip);

                        var i = 0;
                        for (var key in itemData.fortify_modifiers)
                        {
                            var value = itemData.fortify_modifiers[key];
                            for (var modifier in value) {
                                if (modifier != "gem") {
                                    var specialLabel = $.CreatePanel( "Label", itemTooltip, "ItemTooltipFortifyModifier" + i);
                                    specialLabel.AddClass("TooltipLabel");
                                    specialLabel.html = true;

                                    var finalValue = value[modifier];

                                    finalValue = Util.ConvertModifierValue(modifier, finalValue);

                                    specialLabel.text = Util.ColorString("+ " + Util.RoundToTwo(finalValue),"#ffffff") + " " + $.Localize(modifier);

                                    i = i + 1;
                                }
                            }
                        }
                    }
                }
            } else if (abilityName && abilityName != "not-found" && abilityName != "undefined") {
                $("#TooltipText").visible = false;

                // abilityTooltipTable = JSON.parse(abilityTooltipString);

                var abilityKV = PlayerTables.GetTableValue("kvs", "abilities")[abilityName];

                var abilityTooltip = $.CreatePanel( "Panel", $("#TooltipBorderB"), "AbilityTooltip" );
                abilityTooltip.BLoadLayoutSnippet("AbilityTooltip");

                abilityTooltip.FindChildTraverse("AbilityTooltipImage").abilityname = abilityName;

                abilityTooltip.FindChildTraverse("AbilityTooltipName").text = $.Localize("DOTA_Tooltip_ability_" + abilityName);

                var costOrPoint = 0;

                costOrPoint += FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipEnergyCost"), "energy_cost", abilityKV["AbilityManaCost"], "#63adf2");
                costOrPoint += FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCastPoint"), "cast_point", abilityKV["AbilityCastPoint"]);

                costOrPoint += FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCooldown"), "cooldown", abilityKV["AbilityCooldown"]);

                if (costOrPoint > 0) {
                    AddCBR(abilityTooltip, $("#AbilityTooltipDescription"));
                }
                
                abilityTooltip.FindChildTraverse("AbilityTooltipDescription").text = $.Localize("DOTA_Tooltip_ability_" + abilityName + "_Description");

                var newModifiers = {};

                var i = 1;
                for (special in abilityKV["AbilitySpecial"]) {
                    for (specialName in abilityKV["AbilitySpecial"][special]) {
                        if (specialName != "var_type") {
                            var specialCaption = $.Localize("DOTA_Tooltip_ability_" + abilityName + "_" + specialName);
                            if (specialCaption == "DOTA_Tooltip_ability_" + abilityName + "_" + specialName) continue;

                            var specialLabel = $.CreatePanel( "Label", abilityTooltip, "AbilityTooltipSpecial" + i);
                            specialLabel.AddClass("TooltipLabel");
                            specialLabel.html = true;

                            var percent = false;

                            if (specialCaption[0] == "%") {
                                specialCaption = specialCaption.replace("%", "");
                                percent = true;
                            }

                            var finalValue = parseFloat(abilityKV["AbilitySpecial"][special][specialName]);
                            
                            if (Entities.GetUnitName(hero)) {
                                var valueColor = "#ffffff";
                                for (var i = 0; i < Entities.GetNumBuffs( hero); i++) {
                                    var buff = Entities.GetBuff( hero, i );
                                    var buffName = Buffs.GetName(hero, buff);
                                    if (buffName.match("ziv_" + heroName)) {

                                        var stackCount = Buffs.GetStackCount(hero, buff);
                                        var runeName = buffName.replace("ziv_" + heroName, "item_rune");

                                        var itemKV = PlayerTables.GetTableValue("kvs", "items")[runeName];
                                        if (!itemKV) {
                                            itemKV = PlayerTables.GetTableValue("kvs", "items")[buffName.replace("ziv_" + heroName, "item_rune_"+heroName)];
                                        }
                                        if (buffName.match(abilityName) && stackCount != 0) {
                                            var multiplier = itemKV["Reduction"] == 1 ? -1 : 1;

                                            if (itemKV["Tooltip"] == specialName) {
                                                valueColor = "#3fb568";
                                                if (itemKV["Type"] == "Add") {
                                                    finalValue += stackCount * multiplier;
                                                } else {
                                                    finalValue = finalValue + ((finalValue * (stackCount * 0.01)) * multiplier);
                                                }
                                            } else if (itemKV["Tooltip"] == "AbilityCooldown") {
                                                valueColor = "#3fb568";
                                                if (itemKV["Type"] == "Add") {
                                                    FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCooldown"), "cooldown", abilityKV["AbilityCooldown"] + (stackCount * multiplier), valueColor);
                                                } else {
                                                    FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCooldown"), "cooldown", abilityKV["AbilityCooldown"] + ((abilityKV["AbilityCooldown"] * (stackCount * 0.01)) * multiplier), valueColor);
                                                }
                                            } else if (itemKV["Tooltip"] == "New") {
                                                var newValue = stackCount;
                                                if (itemKV["Type"] == "Float") {
                                                    newValue = newValue / 100;
                                                } else {
                                                    newValue += "%";
                                                }
                                                newModifiers[buffName] = Util.ColorString("+ " + newValue,"#ffffff") + " " + $.Localize(buffName);
                                            }
                                        }
                                    }
                                }
                            }

                            var finalValue = Util.RoundToTwo(finalValue);

                            specialLabel.text = Util.AutoUppercase(specialCaption) + "Â " + Util.ColorString(finalValue + (percent ? '%' : ""),valueColor);
                        }
                    }
                    i++;
                }

                if (Object.keys( newModifiers ).length >= 1)
                {
                    AddCBR(abilityTooltip);
                    for (var key in newModifiers) 
                    {
                        var newModifier = $.CreatePanel( "Label", abilityTooltip, "AbilityTooltipNewSpecial" + i);
                        newModifier.AddClass("TooltipLabel");
                        newModifier.html = true;

                        newModifier.text = newModifiers[key];
                    }
                }
            } else {
                $("#TooltipText").text = $.Localize( $.GetContextPanel().GetAttributeString( "text", "not-found" ) );    
            }
        }
    </script>
    <Panel class="TooltipContents GenericBackground" ontooltiploaded="SetupTooltip()">
        <Panel class="TooltipBorderA">
            <Panel id="TooltipBorderB" class="TooltipBorderB">
                 <Label id="TooltipText" html="true" class="TooltipText"/>
            </Panel>
        </Panel>
    </Panel>
</root>
