<root>
    <styles>
        <include src="s2r://panorama/styles/dotastyles.vcss_c" />
        <include src="file://{resources}/styles/custom_game/ingame_ui_windows.css" />
        <include src="file://{resources}/styles/custom_game/ingame_ui_colors.css" />
    </styles>
    <snippets>
        <snippet name="AbilityTooltip">
            <Panel class="AbilityTooltip WindowAnimation">
                <DOTAAbilityImage id="AbilityTooltipImage" class="BasicShadow" abilityname="ziv_empty1"/>
                <Panel class="TooltipCBR"/>
                <Label id="AbilityTooltipName" class="TooltipLabel" text=""/>
                <Panel class="TooltipCBR"/>
                <Label id="AbilityTooltipEnergyCost" html="true" class="TooltipLabel" text="#energy_cost"/>
                <Label id="AbilityTooltipCooldown" html="true" class="TooltipLabel" text="#cooldown"/>  
                <Label id="AbilityTooltipCastPoint" html="true" class="TooltipLabel" text="#cast_point"/> 
                <Label id="AbilityTooltipDescription" class="TooltipLabel" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."/> 
                <Panel class="TooltipCBR"/>
            </Panel>
        </snippet>
        <snippet name="ItemTooltip">
            <Panel class="ItemTooltip WindowAnimation">
                <DOTAItemImage id="ItemTooltipImage" class="BasicShadow" abilityname="ziv_empty1"/>
                <Panel class="TooltipCBR"/>
                <Label id="ItemTooltipName" html="true" class="TooltipLabel" text=""/>
                <Panel class="TooltipCBR"/>
                <Label id="ItemTooltipClass" html="true" class="TooltipLabel" text=""/> 
                <Label id="ItemTooltipRarity" html="true" class="TooltipLabel" text=""/>
                <Label id="ItemTooltipSlot" html="true" class="TooltipLabel" text=""/>  
                <Label id="ItemTooltipSockets" html="true" class="TooltipLabel" text=""/> 
                <Panel class="TooltipCBR"/>
                <Label id="ItemTooltipDescription" class="TooltipLabel" text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."/> 
            </Panel>
        </snippet>
        <snippet name="AccountTooltip">
            <Panel class="AccountTooltip WindowAnimation">
                <Label id="AccountTooltipEXPLabel" text="#experience"/>
                <Label id="AccountTooltipEXPNumberLabel" text="500 / 1000"/>
                <Panel class="TooltipCBR"/>
                <Panel id="AccountTier" class="WindowAnimation">
                    <Panel id="AccountTooltipInfo">
                        <Label id="AccountTooltipTierTypeLabel" text="#tier_1" html="true"/>
                        <Label id="AccountTooltipTierLabel" text="#tier" html="true"/>
                        <Label id="AccountTooltipTierIcon" text="1"/>
                    </Panel>
                    <Label id="AccountTooltipInfoLabel" text="#account_info"/>
                </Panel>
                <Panel class="TooltipCBR"/>
                <Panel class="AccountTooltipRewards">
                    <Label id="AccountTooltipRewardsLevelLabel" text="#next_level"/>
                    <Label id="AccountTooltipRewardsLabel" text="" html="true"/>
                </Panel>
            </Panel>
        </snippet>
    </snippets>
    <script>
        var Util;
        var PlayerTables;
        var Account;

        function FillProperty(panel, name, value, color) {
            if (value && value != "undefined" && (typeof(value) == "string" || Util.RoundToTwo(value) != 0)) {
                var newValue = value;
                if (typeof(value) != "string") {
                    newValue = Util.RoundToTwo(value);
                }
                panel.text = $.Localize(name) + " <font color=\"" + (color ? color : "#ffffff") + "\">" + newValue + "</font>";
                return 1;
            } else {
                panel.visible = false;
                return 0;
            }
        }

        function AddCBR(parent, before) {
            var cbr = $.CreatePanel( "Panel", parent, "" );
            cbr.AddClass("TooltipCBR");
            if (before) {
                parent.MoveChildBefore(cbr, before);
            }
        }

        function SetupTooltip()
        {
            for (var panelID in $("#TooltipBorderB").FindChildrenWithClassTraverse("ItemTooltip")) {
                $("#TooltipBorderB").FindChildrenWithClassTraverse("ItemTooltip")[panelID].RemoveAndDeleteChildren();
                $("#TooltipBorderB").FindChildrenWithClassTraverse("ItemTooltip")[panelID].DeleteAsync(0.0);
            }

            for (var panelID in $("#TooltipBorderB").FindChildrenWithClassTraverse("AbilityTooltip")) {
                $("#TooltipBorderB").FindChildrenWithClassTraverse("AbilityTooltip")[panelID].RemoveAndDeleteChildren();
                $("#TooltipBorderB").FindChildrenWithClassTraverse("AbilityTooltip")[panelID].DeleteAsync(0.0);
            }

            for (var panelID in $("#TooltipBorderB").FindChildrenWithClassTraverse("AccountTooltip")) {
                $("#TooltipBorderB").FindChildrenWithClassTraverse("AccountTooltip")[panelID].RemoveAndDeleteChildren();
                $("#TooltipBorderB").FindChildrenWithClassTraverse("AccountTooltip")[panelID].DeleteAsync(0.0);
            }

            PlayerTables = GameUI.CustomUIConfig().PlayerTables;
            Util = GameUI.CustomUIConfig().Util;
            Account = GameUI.CustomUIConfig().Account;

            var hero = Players.GetPlayerHeroEntityIndex( Players.GetLocalPlayer() );
            var heroName = Entities.GetUnitName(hero);
            if (heroName) {
                heroName = PlayerTables.GetTableValue("kvs", "heroes")[Entities.GetUnitName(hero)]["SecondName"];
            }

            var abilityName = $.GetContextPanel().GetAttributeString( "ability", "not-found" );
            var itemID = parseInt($.GetContextPanel().GetAttributeString( "itemID", "not-found" ));
            var accountRewards = $.GetContextPanel().GetAttributeString( "accountRewards", undefined );
            
            if (accountRewards == true) {
                var accountTooltip = $.CreatePanel( "Panel", $("#TooltipBorderB"), "AccountTooltip" );
                accountTooltip.BLoadLayoutSnippet("AccountTooltip");

                accountTooltip.FindChildTraverse("AccountTooltipTierTypeLabel").text = $.Localize("tier_" + Account.GetTierByLevel());

                accountTooltip.FindChildTraverse("AccountTooltipTierIcon").text = Util.RepeatNumber(Account.GetLevel() - 1, 8) + 1;

                accountTooltip.FindChildTraverse("AccountTooltipTierIcon").style.backgroundImage = "url('file://{images}/custom_game/account/tier" + Account.GetTierByLevel() + ".png')";

                accountTooltip.FindChildTraverse("AccountTooltipEXPNumberLabel").text = (Account.GetEXPPerLevel() - Account.GetNeededEXP()) + " / " + Account.GetEXPPerLevel();

                var rewards = PlayerTables.GetTableValue("kvs", "rewards")[Account.GetTierByLevel()+1];
                var text = "";
                for (var id in rewards) {
                    if (text != "") {
                        text = text + "<br>"
                    }
                    text = text + $.Localize("reward_" + rewards[id]);
                }

                accountTooltip.FindChildTraverse("AccountTooltipRewardsLabel").text = text;
            } else if (itemID && itemID != "not-found" && itemID != undefined) {
                var itemName = Abilities.GetAbilityName(itemID);
                var itemData = PlayerTables.GetTableValue("items", itemID)

                if (itemData) {
                    $("#TooltipText").visible = false;

                    var itemKV = PlayerTables.GetTableValue("kvs", "items")[itemName];

                    var itemTooltip = $.CreatePanel( "Panel", $("#TooltipBorderB"), "ItemTooltip" );
                    itemTooltip.BLoadLayoutSnippet("ItemTooltip");

                    itemTooltip.FindChildTraverse("ItemTooltipImage").itemname = itemName;

                    itemTooltip.FindChildTraverse("ItemTooltipName").text = Util.SpanString(itemData.caption, "Rarity" + itemData.rarity) || $.Localize("DOTA_Tooltip_ability_" + itemName);

                    FillProperty(itemTooltip.FindChildTraverse("ItemTooltipClass"), "class", $.Localize(itemData.class), "#FFFFFF");

                    itemTooltip.FindChildTraverse("ItemTooltipRarity").text = $.Localize("rarity") + Util.SpanString(($.Localize("rarity" + itemData.rarity)), "Rarity" + itemData.rarity);

                    if (itemKV["Slot"]) {
                        FillProperty(itemTooltip.FindChildTraverse("ItemTooltipSlot"), "slot", $.Localize("slot_" + itemKV["Slot"]), "#FFFFFF");
                    } else {
                        itemTooltip.FindChildTraverse("ItemTooltipSlot").visible = false;
                    }

                    itemTooltip.FindChildTraverse("ItemTooltipSockets").text = $.Localize("sockets") + Util.ColorString(itemData.sockets);
                    itemTooltip.FindChildTraverse("ItemTooltipSockets").visible = itemData.sockets > 0;

                    itemTooltip.FindChildTraverse("ItemTooltipDescription").text = $.Localize("DOTA_Tooltip_ability_" + itemName + "_Description");

                    var modifierPanelCache = [];
                    var modifierValueCache = [];

                    if (itemData.built_in_modifiers && Object.keys( itemData.built_in_modifiers ).length >= 1)
                    {
                        AddCBR(itemTooltip);

                        var i = 0;
                        for (var key in itemData.built_in_modifiers)
                        {
                            for (var modifier in itemData.built_in_modifiers[key]) {
                                var specialLabel;
                                if (modifierPanelCache[modifier]) {
                                    specialLabel = modifierPanelCache[modifier];
                                } else {
                                    specialLabel = $.CreatePanel( "Label", itemTooltip, "ItemTooltipSpecial" + i);
                                    specialLabel.AddClass("TooltipLabel");
                                    specialLabel.html = true;

                                    modifierPanelCache[modifier] = specialLabel;
                                }

                                modifierValueCache[modifier] = (modifierValueCache[modifier] || 0) + itemData.built_in_modifiers[key][modifier];

                                var value = Util.ConvertValue(modifier, 0, modifierValueCache[modifier], true);
                                if (value == "") {
                                    specialLabel.text = Util.ColorString($.Localize(modifier),"#4EAD8C");
                                } else {
                                    var sign = value < 0 ? "-" : "+";
                                    specialLabel.text = Util.ColorString(sign + " " + Math.abs(value),"#ffffff") + " " + $.Localize(modifier);
                                }  

                                i = i + 1;
                            }
                        }
                    }

                    if (itemData.fortify_modifiers && Object.keys( itemData.fortify_modifiers ).length >= 1)
                    {
                        AddCBR(itemTooltip);

                        var i = 0;
                        for (var key in itemData.fortify_modifiers)
                        {
                            var value = itemData.fortify_modifiers[key];
                            for (var modifier in value) {
                                if (modifier != "gem") {
                                    var specialLabel = $.CreatePanel( "Label", itemTooltip, "ItemTooltipFortifyModifier" + i);
                                    specialLabel.AddClass("TooltipLabel");
                                    specialLabel.html = true;

                                    var value = Util.ConvertValue(modifier, 0, value[modifier], true);
                                    if (value == "") {
                                        specialLabel.text = Util.ColorString($.Localize(modifier),"#4EAD8C");
                                    } else {
                                        var sign = value < 0 ? "-" : "+";
                                        specialLabel.text = Util.ColorString(sign + " " + Math.abs(value),"#ffffff") + " " + $.Localize(modifier);
                                    }  

                                    i = i + 1;
                                }
                            }
                        }
                    }
                }
            } else if (abilityName && abilityName != "not-found" && abilityName != "undefined") {
                $("#TooltipText").visible = false;

                var abilityKV = PlayerTables.GetTableValue("kvs", "abilities")[abilityName];

                var abilityTooltip = $.CreatePanel( "Panel", $("#TooltipBorderB"), "AbilityTooltip" );
                abilityTooltip.BLoadLayoutSnippet("AbilityTooltip");

                abilityTooltip.FindChildTraverse("AbilityTooltipImage").abilityname = abilityName;

                abilityTooltip.FindChildTraverse("AbilityTooltipName").text = $.Localize("DOTA_Tooltip_ability_" + abilityName);

                var costOrPoint = 0;

                costOrPoint += FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipEnergyCost"), "energy_cost", abilityKV["AbilityManaCost"], "#63adf2");
                costOrPoint += FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCastPoint"), "cast_point", abilityKV["AbilityCastPoint"]);

                costOrPoint += FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCooldown"), "cooldown", abilityKV["AbilityCooldown"]);

                if (costOrPoint > 0) {
                    AddCBR(abilityTooltip, $("#AbilityTooltipDescription"));
                }
                
                abilityTooltip.FindChildTraverse("AbilityTooltipDescription").text = $.Localize("DOTA_Tooltip_ability_" + abilityName + "_Description");

                var i = 1;
                for (special in abilityKV["AbilitySpecial"]) {
                    for (specialName in abilityKV["AbilitySpecial"][special]) {
                        if (specialName != "var_type") {
                            var specialCaption = $.Localize("DOTA_Tooltip_ability_" + abilityName + "_" + specialName);
                            if (specialCaption == "DOTA_Tooltip_ability_" + abilityName + "_" + specialName) continue;

                            var specialLabel = $.CreatePanel( "Label", abilityTooltip, "AbilityTooltipSpecial" + i);
                            specialLabel.AddClass("TooltipLabel");
                            specialLabel.html = true;

                            var percent = false;

                            if (specialCaption[0] == "%") {
                                specialCaption = specialCaption.replace("%", "");
                                percent = true;
                            }

                            var finalValue = parseFloat(abilityKV["AbilitySpecial"][special][specialName]);
                            var valueColor = "#ffffff";

                            if (Entities.GetUnitName(hero)) {
                                for (var i = 0; i < Entities.GetNumBuffs( hero); i++) {
                                    var buff = Entities.GetBuff( hero, i );
                                    var buffName = Buffs.GetName(hero, buff);

                                    if (buffName.match("ziv_" + heroName)) {

                                        var stackCount = Buffs.GetStackCount(hero, buff);
                                        var runeName = buffName.replace("ziv_" + heroName, "item_rune");

                                        var itemKV = PlayerTables.GetTableValue("kvs", "items")[runeName];
                                        if (!itemKV) {
                                            itemKV = PlayerTables.GetTableValue("kvs", "items")[buffName.replace("ziv_" + heroName, "item_rune_"+heroName)];
                                        }
                                        if (buffName.match(abilityName) && stackCount != 0) {
                                            var multiplier = itemKV["Reduction"] == 1 ? -1 : 1;

                                            if (itemKV["Tooltip"] == specialName) {
                                                valueColor = "#3fb568";
                                                finalValue = Util.ConvertValue(buffName, finalValue, stackCount);
                                            }
                                        }
                                    }
                                }
                            }

                            var finalValue = Util.RoundToTwo(finalValue);

                            specialLabel.text = Util.AutoUppercase(specialCaption) + " " + Util.ColorString(finalValue + (percent ? '%' : ""),valueColor);
                        }
                    }
                    i++;
                }

                var newModifiers = {};

                if (Entities.GetUnitName(hero)) {
                    for (var i = 0; i < Entities.GetNumBuffs( hero); i++) {
                        var buff = Entities.GetBuff( hero, i );
                        var buffName = Buffs.GetName(hero, buff);

                        if (buffName.match("ziv_" + heroName)) {
                            var stackCount = Buffs.GetStackCount(hero, buff);
                            var runeName = buffName.replace("ziv_" + heroName, "item_rune");

                            var itemKV = PlayerTables.GetTableValue("kvs", "items")[runeName];
                            if (!itemKV) {
                                itemKV = PlayerTables.GetTableValue("kvs", "items")[buffName.replace("ziv_" + heroName, "item_rune_"+heroName)];
                            }
                            if (buffName.match(abilityName) && stackCount != 0) {
                                var multiplier = itemKV["Reduction"] == 1 ? -1 : 1;

                                if (itemKV["Tooltip"] == "AbilityCooldown") {
                                    FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCooldown"), "cooldown", Util.ConvertValue(buffName, abilityKV["AbilityCooldown"], stackCount), "#3fb568");
                                } else if (itemKV["Tooltip"] == "AbilityCastPoint") {
                                    FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipCastPoint"), "cast_point", Util.ConvertValue(buffName, abilityKV["AbilityCastPoint"], stackCount), "#3fb568");
                                } else if (itemKV["Tooltip"] == "AbilityManaCost") {
                                    FillProperty(abilityTooltip.FindChildTraverse("AbilityTooltipEnergyCost"), "energy_cost", Util.ConvertValue(buffName, abilityKV["AbilityManaCost"], stackCount), "#3fb568");
                                } else if (itemKV["Tooltip"] == "New") {
                                    var value = Util.ConvertValue(buffName, 0, stackCount);
                                    if (value == "") {
                                        newModifiers[buffName] = Util.ColorString($.Localize(buffName),"#4EAD8C");  
                                    } else {
                                        newModifiers[buffName] = Util.ColorString("+ " + value,"#ffffff") + " " + $.Localize(buffName);
                                    }   
                                }
                            }
                        }
                    }
                }

                if (Object.keys( newModifiers ).length >= 1)
                {
                    AddCBR(abilityTooltip);
                    for (var key in newModifiers) 
                    {
                        var newModifier = $.CreatePanel( "Label", abilityTooltip, "AbilityTooltipNewSpecial" + i);
                        newModifier.AddClass("TooltipLabel");
                        newModifier.html = true;

                        newModifier.text = newModifiers[key];
                    }
                }
            } else {
                $("#TooltipText").text = $.Localize( $.GetContextPanel().GetAttributeString( "text", "not-found" ) );    
            }
        }
    </script>
    <Panel class="TooltipContents GenericBackground" ontooltiploaded="SetupTooltip()">
        <Panel class="TooltipBorderA">
            <Panel id="TooltipBorderB" class="TooltipBorderB">
                 <Label id="TooltipText" html="true" class="TooltipText"/>
            </Panel>
        </Panel>
    </Panel>
</root>
