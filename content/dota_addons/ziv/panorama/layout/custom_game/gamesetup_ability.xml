<root>
	<styles>
		<include src="s2r://panorama/styles/dotastyles.vcss_c" />
		<include src="file://{resources}/styles/custom_game/ingame_ui_windows.css" />
		<include src="file://{resources}/styles/custom_game/ingame_ui_abilities.css" />
		<include src="file://{resources}/styles/custom_game/gamesetup_ability.css" />
	</styles>
	<script>
		var PlayerTables = GameUI.CustomUIConfig().PlayerTables;

		function AbilityShowTooltip()
		{
			$.DispatchEvent( "DOTAShowAbilityTooltipForEntityIndex", $( "#CCSAbilityButton" ), $( "#CCSAbilityImage" ).abilityname, 0 );
		}

		function AbilityHideTooltip()
		{
			var abilityButton = $( "#CCSAbilityButton" );
			$.DispatchEvent( "DOTAHideAbilityTooltip", abilityButton );
		}

		function SelectAbility()
		{
			var panel = $.GetContextPanel();
			var contextMenu = panel.GetParent();
			if (contextMenu.id == "Contents") {
				contextMenu.SelectAbility(panel, contextMenu);
			}
		}

		function OpenAbilityContextMenu() 
		{
			var panel = $.GetContextPanel();
			if (panel.abilitygroup && panel.abilitygroup.length > 1 && !panel.BHasClass("ContextMenuAbility")) {
				var content = $.CreatePanel( "Panel", panel, "Contents" );

				content.BLoadLayout( "file://{resources}/layout/custom_game/gamesetup_ability_context_menu.xml", false, false );
				content.SetAbilities(panel.abilitygroup, panel);
				content.SetFocus();

				$("#CCSAbilityButton").AddClass("HideAbility");

				Game.EmitSound( "ui.click_alt" );
			}
		}

		function SetAbility(name, group)
		{
			var panel = $.GetContextPanel();
			panel.abilityname = $("#CCSAbilityImage").abilityname = name;
			panel.abilitygroup = group;

			GameUI.CustomUIConfig().AddAbilityTooltip(panel, panel.abilityname);

			var customCreationOptions = PlayerTables.GetTableValue("kvs", "abilities")[panel.abilityname]["CustomCreationOptions"];

			if (panel.SetCreationOptions && customCreationOptions) {
				panel.SetCreationOptions(customCreationOptions);
			}
		}

		(function () {
			$.GetContextPanel().SetAbility = SetAbility;
			$.GetContextPanel().SelectAbility = SelectAbility;

			$.RegisterForUnhandledEvent( "DismissAllContextMenus", (function () { 
				$.GetContextPanel().RemoveClass("HideAbility"); 
			}) );
		})();
	</script>
	<Panel class="CCSAbilityPanel">
		<Button id="CCSAbilityButton"
							onactivate="SelectAbility()"
							oncontextmenu="OpenAbilityContextMenu()"
							>
			<DOTAAbilityImage id="CCSAbilityImage" abilityname="ziv_empty1"/>
			<Panel id="CCSAbilityBorderInner" hittest="false"/>
		</Button>
	</Panel>
</root>


